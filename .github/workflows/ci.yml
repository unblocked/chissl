on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  workflow_dispatch: {}
name: CI
jobs:
  # ================
  # TEST JOB
  #   runs on every push and PR
  #   runs 2x3 times (see matrix)
  # ================
  test:
    name: Test
    strategy:
      matrix:
        go-version: [1.21.x]
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    if: >-
      ${{
        github.event_name == 'push' || github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'pull_request' &&
          (github.event.pull_request.author_association == 'OWNER' ||
           github.event.pull_request.author_association == 'MEMBER' ||
           github.event.pull_request.author_association == 'COLLABORATOR')) ||
        (github.event_name == 'pull_request_review' &&
          github.event.review.state == 'approved' &&
          (github.event.review.author_association == 'OWNER' ||
           github.event.review.author_association == 'MEMBER' ||
           github.event.review.author_association == 'COLLABORATOR'))
      }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout PR head (on approved review)
        if: github.event_name == 'pull_request_review'
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - name: Checkout code (push/tags/manual)
        if: github.event_name != 'pull_request_review'
        uses: actions/checkout@v4
      - name: Build (CGO)
        shell: bash
        run: |
          export CGO_ENABLED=1
          go version
          go build -v -o /dev/null .
      - name: Unit tests (exclude legacy e2e)
        shell: bash
        run: |
          set -euo pipefail
          export CGO_ENABLED=1
          pkgs=$(go list ./... | grep -v '/test/e2e')
          go test -v -count=1 $pkgs
      - name: Security tests (explicit)
        shell: bash
        run: |
          set -euo pipefail
          export CGO_ENABLED=1
          go test -v -count=1 ./tests

  # ================
  # RELEASE JOBS
  #   runs after a success test
  #   only runs on push "v*" tag
  # ================
  release_binaries:
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    name: Release Binaries
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21.x

      - name: Install cross toolchains and libc headers (Linux CGO)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-arm-linux-gnueabihf gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu \
            libc6-dev-armhf-cross libc6-dev-arm64-cross \
            linux-libc-dev-armhf-cross linux-libc-dev-arm64-cross

      - name: Run GoReleaser [Linux+Windows]
        if: runner.os == 'Linux'
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: v2.4.0
          args: release --verbose --config .github/goreleaser.linuxwin.yml
        env:
          GORELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 1

      - name: Run GoReleaser [Darwin]
        if: runner.os == 'macOS'
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: v2.4.0
          args: release --verbose --config .github/goreleaser.darwin.yml
        env:
          GORELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 1

  legacy_e2e:
    name: Legacy e2e (non-blocking)
    needs: test
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21.x
      - name: Checkout PR head (on approved review)
        if: github.event_name == 'pull_request_review'
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - name: Checkout code (push/tags/manual)
        if: github.event_name != 'pull_request_review'
        uses: actions/checkout@v4
      - name: Run legacy e2e tests
        shell: bash
        run: |
          set -euo pipefail
          export CGO_ENABLED=1
          go test -v -count=1 ./test/e2e
